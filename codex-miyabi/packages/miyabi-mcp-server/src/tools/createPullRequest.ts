/**
 * createPullRequest Tool
 *
 * Draft PRを作成
 */

import { GitHubClient } from "../utils/GitHubClient.js";

export interface CreatePullRequestInput {
  issueNumber: number;
  repository: string;
  branch: string;
  title: string;
  body: string;
  files: Array<{
    path: string;
    content: string;
  }>;
  qualityReport: {
    qualityScore: number;
    coverage: number;
    passed: boolean;
  };
}

export interface CreatePullRequestOutput {
  prNumber: number;
  prUrl: string;
  status: "draft" | "ready";
  checksStatus: {
    qualityScore: number;
    testsPass: boolean;
    securityPass: boolean;
  };
}

export async function createPullRequest(
  input: CreatePullRequestInput,
  github: GitHubClient
): Promise<CreatePullRequestOutput> {
  const [owner, repo] = input.repository.split("/");

  // 1. ブランチ作成
  const branchName = input.branch || `agent/issue-${input.issueNumber}-${Date.now()}`;

  try {
    await github.createBranch(owner, repo, branchName, "main");
  } catch (error) {
    console.log(`[createPullRequest] Branch ${branchName} may already exist`);
  }

  // 2. ファイルをコミット
  const commitMessage = `feat: autonomous implementation for issue #${input.issueNumber}

${input.title}

🤖 Generated by Miyabi Autonomous Agent

Quality Score: ${input.qualityReport.qualityScore}/100
Coverage: ${input.qualityReport.coverage}%
`;

  await github.commitFiles(owner, repo, branchName, input.files, commitMessage);

  // 3. PR本文生成
  const prBody = `## 🤖 Autonomous Agent Implementation

**Issue**: #${input.issueNumber}
**Quality Score**: ${input.qualityReport.qualityScore}/100
**Coverage**: ${input.qualityReport.coverage}%

### Quality Report
${input.qualityReport.passed ? "✅" : "❌"} Quality check ${
    input.qualityReport.passed ? "passed" : "failed"
  }

### Checklist
- [x] Code generated
- [x] Tests generated
- [x] Quality check (≥80): ${input.qualityReport.qualityScore}/100
- [ ] Manual review required
- [ ] Ready to merge

${input.body}

Closes #${input.issueNumber}

---
🤖 Generated by Miyabi Autonomous Agent`;

  // 4. Draft PR作成
  const pr = await github.createPullRequest({
    owner,
    repo,
    title: input.title,
    body: prBody,
    head: branchName,
    base: "main",
    draft: true,
  });

  return {
    prNumber: pr.number,
    prUrl: pr.url,
    status: "draft",
    checksStatus: {
      qualityScore: input.qualityReport.qualityScore,
      testsPass: input.qualityReport.passed,
      securityPass: true, // 簡略実装: 固定値
    },
  };
}
